// 121. 买卖股票的最佳时机
// 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
// 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。
// 注意你不能在买入股票前卖出股票。
// 示例 1:
// 输入: [7,1,5,3,6,4]
// 输出: 5
// 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
//      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
// 示例 2:
// 输入: [7,6,4,3,1]
// 输出: 0
// 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

#include "BaseHeader.hpp"


// 理解这个算法  [7,1,5,3,6,4] 举例
// tmp 用于记录预期收益， 记录的是如果当前卖出的话，预期收益是多少。 那记录的是从哪个点买入，并从当前点卖出的 预期收益呢？
// 其实记录的是当前点向前看，值最低的点。  比如当前点是6，那tmp就是 1-6的预期收益，为啥不是 3-6的预期收益呢，因为1-3-6 还是递增的序列。
// 1-7 = -6 

// 其实如果是这种序列 1,3,5,7， 则每次算出的差值是 2，2，2， 累加起来就是 6， max 也会被更新到 6， 很容易理解。
// 如果是 1,5,3,7 这样的，算出的差值 4，-2，4   累加起来也是6

// 5，9，1，7   4，-8，6  累加起来只有2，而放弃4，-8的话，累加起来就有6   明显 6>2 的
// 5，9，6，7 

// 5-1-7 已经不递增。 果断选择 1-7 从新开始
// 5-6-7 还是递增

// 也就是说当 预期收益已经是负的时候，要选择当前值作为新的买入点，继续迭代


class Solution
{
public:
  int maxProfit(vector<int>& prices)
  {
    int max = 0;
    int tmp = 0;
    for(int i = 1; i < prices.size(); i++)
    {
      tmp += prices[i] - prices[i - 1];
      if(tmp > 0)
      {
        if(tmp > max)
        {
          max = tmp;
        }
      }
      else
      {
        tmp = 0;
      }
    }
    return max;
  }
};

int main(int argc, char const* argv[])
{
  Solution s;

// {
//   vector<int> v = {7, 1, 5, 3, 6, 4, 2, 8};
//   cout << s.maxProfit(v) << endl;
// }

  {
    vector<int> v = {7, 1, 5, 3, 6, 4};
    cout << s.maxProfit(v) << endl;
  }

  return 0;
}